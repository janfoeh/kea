(function(app, kea, ko) {
  "use strict";

  var model_name = '<%= name.camelize %>',
      ModelClass;

  ModelClass = function <%= name.camelize %>(data) {
    kea.models.Base.call(this);
<% if options[:validatable] -%>
    kea.models.Validatable.call(this);
<% end -%>
    
    var that = this;

<% if @klass -%>
<% @attribute_initializers.each do |attribute| -%>
    <%= attribute %>
<% end -%>

    // this.addAttribute('foo', { array: true, deserialize: false, serialize: { skipBlank: true } });
    // this.addAssociation('Foo', 'foo', 'hasOne', { serialize: { idOnly: true } });
    // this.serializationOptions = { includeId: true };
<% end -%>
<% if options[:validatable] && @validators.any? -%>

    this.validatableFields = function validatableFields() {
      return <%= @validators.collect(&:attributes).flatten.map(&:to_s).to_s %>;
    };

    this.attachValidators = function attachValidators() {
<% @validators.each do |validator| -%>

      that.<%= validator.attributes.first %>.extend({
        required: {
          message: "Pflichtfeld"
        }
      });
<% end -%>
    };
<% end -%>

    if (data) {
      this.deserialize(data);
    }
  };

  kea.u.inherit(ModelClass, kea.models.Base);

  ModelClass.prototype._modelName = function _modelName() { return model_name; };

  app.models[model_name] = ModelClass;

})(window.app, window.kea, ko);